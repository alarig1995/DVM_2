
DVM_6_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00000602  00000696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  0080017c  0080017c  00000712  2**0
                  ALLOC
  3 .stab         00000aa4  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001af  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001368  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c38  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000312  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062d  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000029c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e7  00000000  00000000  00002f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e0       	ldi	r30, 0x02	; 2
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 37       	cpi	r26, 0x7C	; 124
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	ac e7       	ldi	r26, 0x7C	; 124
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 3a       	cpi	r26, 0xA8	; 168
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	1a d2       	rcall	.+1076   	; 0x49c <main>
  68:	ca c2       	rjmp	.+1428   	; 0x5fe <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <SetRangeDc>:
	return res;
};

void SetRangeDc(u8 ran)
{
	switch(ran)
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	a1 f0       	breq	.+40     	; 0x98 <SetRangeDc+0x2c>
  70:	83 30       	cpi	r24, 0x03	; 3
  72:	28 f4       	brcc	.+10     	; 0x7e <SetRangeDc+0x12>
  74:	88 23       	and	r24, r24
  76:	41 f0       	breq	.+16     	; 0x88 <SetRangeDc+0x1c>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	d1 f4       	brne	.+52     	; 0xb0 <SetRangeDc+0x44>
  7c:	09 c0       	rjmp	.+18     	; 0x90 <SetRangeDc+0x24>
  7e:	83 30       	cpi	r24, 0x03	; 3
  80:	79 f0       	breq	.+30     	; 0xa0 <SetRangeDc+0x34>
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	a9 f4       	brne	.+42     	; 0xb0 <SetRangeDc+0x44>
  86:	10 c0       	rjmp	.+32     	; 0xa8 <SetRangeDc+0x3c>
	{
		case RANGE_LOW:									// EN=0, A1A0=00
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A0);
  88:	5d 98       	cbi	0x0b, 5	; 11
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A1);
  8a:	5e 98       	cbi	0x0b, 6	; 11
			ClearBit(MUX_DC_EN_PORT, MUX_DC_EN_BIT);
  8c:	2f 98       	cbi	0x05, 7	; 5
		break;
  8e:	08 95       	ret
		case RANGE_NEXT1:								// EN=1, A1A0=11
			SetBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A0);
  90:	5d 9a       	sbi	0x0b, 5	; 11
			SetBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A1);
  92:	5e 9a       	sbi	0x0b, 6	; 11
			SetBit(MUX_DC_EN_PORT, MUX_DC_EN_BIT);
  94:	2f 9a       	sbi	0x05, 7	; 5
		break;
  96:	08 95       	ret
		case RANGE_NEXT2:								// EN=1, A1A0=10
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A0);
  98:	5d 98       	cbi	0x0b, 5	; 11
			SetBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A1);
  9a:	5e 9a       	sbi	0x0b, 6	; 11
			SetBit(MUX_DC_EN_PORT, MUX_DC_EN_BIT);
  9c:	2f 9a       	sbi	0x05, 7	; 5
		break;
  9e:	08 95       	ret
		case RANGE_NEXT3:								// EN=1, A1A0=01
			SetBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A0);
  a0:	5d 9a       	sbi	0x0b, 5	; 11
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A1);
  a2:	5e 98       	cbi	0x0b, 6	; 11
			SetBit(MUX_DC_EN_PORT, MUX_DC_EN_BIT);
  a4:	2f 9a       	sbi	0x05, 7	; 5
		break;
  a6:	08 95       	ret
		case RANGE_MAX:									// EN=1, A1A0=00
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A0);
  a8:	5d 98       	cbi	0x0b, 5	; 11
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A1);
  aa:	5e 98       	cbi	0x0b, 6	; 11
			SetBit(MUX_DC_EN_PORT, MUX_DC_EN_BIT);
  ac:	2f 9a       	sbi	0x05, 7	; 5
		break;
  ae:	08 95       	ret
		default:										// EN=0, A1A0=00
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A0);
  b0:	5d 98       	cbi	0x0b, 5	; 11
			ClearBit(MUX_DC_ADDRESS_PORT, MUX_DC_ADDRESS_BIT_A1);
  b2:	5e 98       	cbi	0x0b, 6	; 11
			ClearBit(MUX_DC_EN_PORT, MUX_DC_EN_BIT);
  b4:	2f 98       	cbi	0x05, 7	; 5
  b6:	08 95       	ret

000000b8 <SetRangeAc>:
	};
};

void SetRangeAc(u8 ran)
{
	switch(ran)
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	a1 f0       	breq	.+40     	; 0xe4 <SetRangeAc+0x2c>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	28 f4       	brcc	.+10     	; 0xca <SetRangeAc+0x12>
  c0:	88 23       	and	r24, r24
  c2:	41 f0       	breq	.+16     	; 0xd4 <SetRangeAc+0x1c>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	d1 f4       	brne	.+52     	; 0xfc <SetRangeAc+0x44>
  c8:	09 c0       	rjmp	.+18     	; 0xdc <SetRangeAc+0x24>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	79 f0       	breq	.+30     	; 0xec <SetRangeAc+0x34>
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	a9 f4       	brne	.+42     	; 0xfc <SetRangeAc+0x44>
  d2:	10 c0       	rjmp	.+32     	; 0xf4 <SetRangeAc+0x3c>
	{
		case RANGE_LOW:												// EN=0, A1A0=00
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A0);
  d4:	28 98       	cbi	0x05, 0	; 5
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A1);
  d6:	29 98       	cbi	0x05, 1	; 5
			ClearBit(MUX_AC_EN_PORT, MUX_AC_EN_BIT);
  d8:	5f 98       	cbi	0x0b, 7	; 11
		break;
  da:	08 95       	ret
		case RANGE_NEXT1:											// EN=1, A1A0=11
			SetBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A0);
  dc:	28 9a       	sbi	0x05, 0	; 5
			SetBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A1);
  de:	29 9a       	sbi	0x05, 1	; 5
			SetBit(MUX_AC_EN_PORT, MUX_AC_EN_BIT);
  e0:	5f 9a       	sbi	0x0b, 7	; 11
		break;
  e2:	08 95       	ret
		case RANGE_NEXT2:											// EN=1, A1A0=10
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A0);
  e4:	28 98       	cbi	0x05, 0	; 5
			SetBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A1);
  e6:	29 9a       	sbi	0x05, 1	; 5
			SetBit(MUX_AC_EN_PORT, MUX_AC_EN_BIT);
  e8:	5f 9a       	sbi	0x0b, 7	; 11
		break;
  ea:	08 95       	ret
		case RANGE_NEXT3:											// EN=1, A1A0=01
			SetBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A0);
  ec:	28 9a       	sbi	0x05, 0	; 5
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A1);
  ee:	29 98       	cbi	0x05, 1	; 5
			SetBit(MUX_AC_EN_PORT, MUX_AC_EN_BIT);
  f0:	5f 9a       	sbi	0x0b, 7	; 11
		break;
  f2:	08 95       	ret
		case RANGE_MAX:												// EN=1, A1A0=00
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A0);
  f4:	28 98       	cbi	0x05, 0	; 5
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A1);
  f6:	29 98       	cbi	0x05, 1	; 5
			SetBit(MUX_AC_EN_PORT, MUX_AC_EN_BIT);
  f8:	5f 9a       	sbi	0x0b, 7	; 11
		break;
  fa:	08 95       	ret
		default:													// EN=0, A1A0=00
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A0);
  fc:	28 98       	cbi	0x05, 0	; 5
			ClearBit(MUX_AC_ADDRESS_PORT, MUX_AC_ADDRESS_BIT_A1);
  fe:	29 98       	cbi	0x05, 1	; 5
			ClearBit(MUX_AC_EN_PORT, MUX_AC_EN_BIT);
 100:	5f 98       	cbi	0x0b, 7	; 11
 102:	08 95       	ret

00000104 <NumberToString>:
		break;
	};
};

void NumberToString(s32 voltag, u8 buff[])
{
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	6b 01       	movw	r12, r22
 112:	7c 01       	movw	r14, r24
 114:	ea 01       	movw	r28, r20
	s32 nmbr;
	nmbr = labs(voltag) + 1000000000;  
 116:	dc 01       	movw	r26, r24
 118:	cb 01       	movw	r24, r22
 11a:	ff 20       	and	r15, r15
 11c:	3c f4       	brge	.+14     	; 0x12c <NumberToString+0x28>
 11e:	88 27       	eor	r24, r24
 120:	99 27       	eor	r25, r25
 122:	dc 01       	movw	r26, r24
 124:	8c 19       	sub	r24, r12
 126:	9d 09       	sbc	r25, r13
 128:	ae 09       	sbc	r26, r14
 12a:	bf 09       	sbc	r27, r15
 12c:	80 50       	subi	r24, 0x00	; 0
 12e:	96 43       	sbci	r25, 0x36	; 54
 130:	a5 46       	sbci	r26, 0x65	; 101
 132:	b4 4c       	sbci	r27, 0xC4	; 196
	ltoa(nmbr, buff, 10);
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	ae 01       	movw	r20, r28
 13a:	2a e0       	ldi	r18, 0x0A	; 10
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	1d d2       	rcall	.+1082   	; 0x57a <ltoa>
	if (voltag > 0)
 140:	1c 14       	cp	r1, r12
 142:	1d 04       	cpc	r1, r13
 144:	1e 04       	cpc	r1, r14
 146:	1f 04       	cpc	r1, r15
 148:	1c f4       	brge	.+6      	; 0x150 <NumberToString+0x4c>
	{
		buff[0] = '+';
 14a:	8b e2       	ldi	r24, 0x2B	; 43
 14c:	88 83       	st	Y, r24
 14e:	02 c0       	rjmp	.+4      	; 0x154 <NumberToString+0x50>
	}
	else
	{
		buff[0] = '-';
 150:	8d e2       	ldi	r24, 0x2D	; 45
 152:	88 83       	st	Y, r24
	}
};
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	df 90       	pop	r13
 15e:	cf 90       	pop	r12
 160:	08 95       	ret

00000162 <I2cPrepare>:

void I2cPrepare(void)
{
	
};
 162:	08 95       	ret

00000164 <TerminalPrepare>:
	UartSendNewLine();
	
};

void TerminalPrepare(u8 buff1[], u16 len1, s32 volt)
{
 164:	cf 92       	push	r12
 166:	df 92       	push	r13
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	d8 2f       	mov	r29, r24
 172:	c9 2f       	mov	r28, r25
 174:	f6 2f       	mov	r31, r22
 176:	e7 2f       	mov	r30, r23
 178:	69 01       	movw	r12, r18
 17a:	7a 01       	movw	r14, r20
	memset(buff1, 0, len1);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	4f 2f       	mov	r20, r31
 182:	5e 2f       	mov	r21, r30
 184:	f3 d1       	rcall	.+998    	; 0x56c <memset>
	NumberToString(volt, buff1);
 186:	c7 01       	movw	r24, r14
 188:	b6 01       	movw	r22, r12
 18a:	4d 2f       	mov	r20, r29
 18c:	5c 2f       	mov	r21, r28
 18e:	ba df       	rcall	.-140    	; 0x104 <NumberToString>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <UartSendByte>:
	};
};

void UartSendByte (u8 byt)			
{
	while (BitIsClear(UCSR0A, UDRE0))	//	Выйдем из цикла когда UDR будет пуст
 19e:	e0 ec       	ldi	r30, 0xC0	; 192
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	90 81       	ld	r25, Z
 1a4:	95 ff       	sbrs	r25, 5
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <UartSendByte+0x4>
	{};
	UDR0 = byt;
 1a8:	80 93 c6 00 	sts	0x00C6, r24
};
 1ac:	08 95       	ret

000001ae <UartlSendString>:
	memset(buff1, 0, len1);
	NumberToString(volt, buff1);
}

void UartlSendString(u8* str)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
	while ((*str) != '\0')		//	Пока не встретили конец строки
 1b4:	88 81       	ld	r24, Y
 1b6:	88 23       	and	r24, r24
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <UartlSendString+0x16>
{
	memset(buff1, 0, len1);
	NumberToString(volt, buff1);
}

void UartlSendString(u8* str)
 1ba:	21 96       	adiw	r28, 0x01	; 1
{
	while ((*str) != '\0')		//	Пока не встретили конец строки
	{
		UartSendByte((*str));	//	Отправляем байт по Uart
 1bc:	f0 df       	rcall	.-32     	; 0x19e <UartSendByte>
	NumberToString(volt, buff1);
}

void UartlSendString(u8* str)
{
	while ((*str) != '\0')		//	Пока не встретили конец строки
 1be:	89 91       	ld	r24, Y+
 1c0:	88 23       	and	r24, r24
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <UartlSendString+0xe>
	{
		UartSendByte((*str));	//	Отправляем байт по Uart
		str++;					//	Увеличеваем значение указателя
	};
};
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <UartSendNewLine>:
	UDR0 = byt;
};

void UartSendNewLine (void) 
{
	UartSendByte(0x0A);
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	e8 df       	rcall	.-48     	; 0x19e <UartSendByte>
	UartSendByte(0x0D);
 1ce:	8d e0       	ldi	r24, 0x0D	; 13
 1d0:	e6 df       	rcall	.-52     	; 0x19e <UartSendByte>
}
 1d2:	08 95       	ret

000001d4 <Comm>:
{
	
};

void Comm (void)   
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
	memset(UartString, 0, UART_STRING_SIZE);
 1d8:	cc e8       	ldi	r28, 0x8C	; 140
 1da:	d1 e0       	ldi	r29, 0x01	; 1
 1dc:	88 e1       	ldi	r24, 0x18	; 24
 1de:	fe 01       	movw	r30, r28
 1e0:	11 92       	st	Z+, r1
 1e2:	8a 95       	dec	r24
 1e4:	e9 f7       	brne	.-6      	; 0x1e0 <Comm+0xc>
	ltoa(AdcVoltage_nV_Ac, UartString, 10);  // Отправляем на терминал нВ
 1e6:	60 91 81 01 	lds	r22, 0x0181
 1ea:	70 91 82 01 	lds	r23, 0x0182
 1ee:	80 91 83 01 	lds	r24, 0x0183
 1f2:	90 91 84 01 	lds	r25, 0x0184
 1f6:	ae 01       	movw	r20, r28
 1f8:	2a e0       	ldi	r18, 0x0A	; 10
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	be d1       	rcall	.+892    	; 0x57a <ltoa>
	UartlSendString("Uadc[nV] = ");
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	d5 df       	rcall	.-86     	; 0x1ae <UartlSendString>
	UartlSendString(UartString);
 204:	ce 01       	movw	r24, r28
 206:	d3 df       	rcall	.-90     	; 0x1ae <UartlSendString>
	UartSendNewLine();
 208:	e0 df       	rcall	.-64     	; 0x1ca <UartSendNewLine>
	
	TerminalPrepare(UartString, UART_STRING_SIZE, Voltage_uV_Ac);
 20a:	20 91 a4 01 	lds	r18, 0x01A4
 20e:	30 91 a5 01 	lds	r19, 0x01A5
 212:	40 91 a6 01 	lds	r20, 0x01A6
 216:	50 91 a7 01 	lds	r21, 0x01A7
 21a:	ce 01       	movw	r24, r28
 21c:	68 e1       	ldi	r22, 0x18	; 24
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	a1 df       	rcall	.-190    	; 0x164 <TerminalPrepare>
	I2cPrepare();
	UartlSendString("Udvm[uV] = ");
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	c3 df       	rcall	.-122    	; 0x1ae <UartlSendString>
	UartlSendString(UartString);
 228:	ce 01       	movw	r24, r28
 22a:	c1 df       	rcall	.-126    	; 0x1ae <UartlSendString>
	UartSendNewLine();
 22c:	ce df       	rcall	.-100    	; 0x1ca <UartSendNewLine>
	
};
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <UartInit>:
	UartSendByte(0x0D);
}

void UartInit (void)			
{
	UBRR0H = 0;	   	//	Задаем скорость перадчи по UART (9600 baud)
 234:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;
 238:	83 e3       	ldi	r24, 0x33	; 51
 23a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = 0x00; 	// 8 битовая посылка, 1 стоп бит,
 23e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x18; 	// контроля четности нет
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x86;
 248:	86 e8       	ldi	r24, 0x86	; 134
 24a:	80 93 c2 00 	sts	0x00C2, r24
};
 24e:	08 95       	ret

00000250 <PortsInit>:

void PortsInit(void) 
{
	SetBit(MUX_DC_EN_DDR, MUX_DC_EN_BIT);			// EN 
 250:	27 9a       	sbi	0x04, 7	; 4
	SetBit(MUX_DC_ADDRESS_DDR, MUX_DC_ADDRESS_BIT_A0);	// A0 
 252:	55 9a       	sbi	0x0a, 5	; 10
	SetBit(MUX_DC_ADDRESS_DDR, MUX_DC_ADDRESS_BIT_A1);	// A1 
 254:	56 9a       	sbi	0x0a, 6	; 10
	
	SetBit(MUX_AC_EN_DDR, MUX_AC_EN_BIT);				// EN
 256:	57 9a       	sbi	0x0a, 7	; 10
	SetBit(MUX_AC_ADDRESS_DDR, MUX_AC_ADDRESS_BIT_A0);	// A0
 258:	20 9a       	sbi	0x04, 0	; 4
	SetBit(MUX_AC_ADDRESS_DDR, MUX_AC_ADDRESS_BIT_A1);	// A1
 25a:	21 9a       	sbi	0x04, 1	; 4
}
 25c:	08 95       	ret

0000025e <SpiInitMaster>:

void SpiInitMaster(void) 	
{			
	SetBit(SPI_DDR, SPI_PIN_SS);		// Настроить выводы DDRB на выход (SS, MOSI, SCK)
 25e:	22 9a       	sbi	0x04, 2	; 4
	SetBit(SPI_DDR, SPI_PIN_MOSI);
 260:	23 9a       	sbi	0x04, 3	; 4
	SetBit(SPI_DDR, SPI_PIN_SCK);
 262:	25 9a       	sbi	0x04, 5	; 4
	ClearBit(SPI_DDR, SPI_PIN_MISO);	// MISO На вход
 264:	24 98       	cbi	0x04, 4	; 4
	SetBit(SPCR, MSTR);					// Режим мастер, F=Fosc/4
 266:	8c b5       	in	r24, 0x2c	; 44
 268:	80 61       	ori	r24, 0x10	; 16
 26a:	8c bd       	out	0x2c, r24	; 44
	SetBit(SPCR, CPOL);					// Импульсы отр. полярности
 26c:	8c b5       	in	r24, 0x2c	; 44
 26e:	88 60       	ori	r24, 0x08	; 8
 270:	8c bd       	out	0x2c, r24	; 44
	SetBit(SPCR, CPHA);					// Обработка по заднему фронту
 272:	8c b5       	in	r24, 0x2c	; 44
 274:	84 60       	ori	r24, 0x04	; 4
 276:	8c bd       	out	0x2c, r24	; 44
	SetBit(SPCR, SPE);					// Включить SPI
 278:	8c b5       	in	r24, 0x2c	; 44
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8c bd       	out	0x2c, r24	; 44
	SetBit(SPI_PORT,SPI_PIN_SS);		// SS на 1
 27e:	2a 9a       	sbi	0x05, 2	; 5
}
 280:	08 95       	ret

00000282 <SpiReadByte>:

u8 SpiReadByte(u8 byt)		
{
	u8 res;							//	Переменная для результата
	ClearBit(SPI_PORT,SPI_PIN_SS);	//	SS в 0
 282:	2a 98       	cbi	0x05, 2	; 5
	SPDR = byt;						//	Отправить байт		
 284:	8e bd       	out	0x2e, r24	; 46
	while(BitIsClear(SPSR, SPIF));	//	Ждем завршения отправки
 286:	0d b4       	in	r0, 0x2d	; 45
 288:	07 fe       	sbrs	r0, 7
 28a:	fd cf       	rjmp	.-6      	; 0x286 <SpiReadByte+0x4>
	res = SPDR;						//	Фиксируем принятый байт
 28c:	8e b5       	in	r24, 0x2e	; 46
	SetBit(SPI_PORT,SPI_PIN_SS);	//	SS в 1
 28e:	2a 9a       	sbi	0x05, 2	; 5
	return res;						//	Возвращаем байт данных
};
 290:	08 95       	ret

00000292 <Ad7792Reset>:

void Ad7792Reset(void)				
{
	SpiCode = SpiReadByte(0xFF);	//	Посылаем 32 клока
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	f6 df       	rcall	.-20     	; 0x282 <SpiReadByte>
 296:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0xFF);
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	f2 df       	rcall	.-28     	; 0x282 <SpiReadByte>
 29e:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0xFF);
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	ee df       	rcall	.-36     	; 0x282 <SpiReadByte>
 2a6:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0xFF);
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	ea df       	rcall	.-44     	; 0x282 <SpiReadByte>
 2ae:	80 93 8b 01 	sts	0x018B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	8f e1       	ldi	r24, 0x1F	; 31
 2b4:	9e e4       	ldi	r25, 0x4E	; 78
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Ad7792Reset+0x24>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Ad7792Reset+0x2a>
 2bc:	00 00       	nop
	_delay_ms(10);					//	Пауза для перезагрузки АЦП
};
 2be:	08 95       	ret

000002c0 <Ad7792SetInput>:

void Ad7792SetInput(u8 gn, u8 ch)					
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	d8 2f       	mov	r29, r24
 2c6:	c6 2f       	mov	r28, r22
	SpiCode = SpiReadByte(AD7792_CONF_REG); // Заходим в CONFIGURATION регистр
 2c8:	80 e1       	ldi	r24, 0x10	; 16
 2ca:	db df       	rcall	.-74     	; 0x282 <SpiReadByte>
 2cc:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(gn); 				// Старший байт - Кэф, биполярный/униполярный режим
 2d0:	8d 2f       	mov	r24, r29
 2d2:	d7 df       	rcall	.-82     	; 0x282 <SpiReadByte>
 2d4:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(ch); 				// Младший байт - внутренний/ внешний ИОН, канал
 2d8:	8c 2f       	mov	r24, r28
 2da:	d3 df       	rcall	.-90     	; 0x282 <SpiReadByte>
 2dc:	80 93 8b 01 	sts	0x018B, r24
};
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <Ad7792Calibration>:

void Ad7792Calibration(void)					
{
	SpiCode = SpiReadByte(AD7792_MODE_REG);		//	Заходим в Mode регистр
 2e6:	88 e0       	ldi	r24, 0x08	; 8
 2e8:	cc df       	rcall	.-104    	; 0x282 <SpiReadByte>
 2ea:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0x80);				//	Offset калибровка
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	c8 df       	rcall	.-112    	; 0x282 <SpiReadByte>
 2f2:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0x01);											
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	c4 df       	rcall	.-120    	; 0x282 <SpiReadByte>
 2fa:	80 93 8b 01 	sts	0x018B, r24
	while(BitIsSet(SPI_PORT, SPI_PIN_MISO));	//	Ждем конца калибровки
 2fe:	2c 99       	sbic	0x05, 4	; 5
 300:	fe cf       	rjmp	.-4      	; 0x2fe <Ad7792Calibration+0x18>
	
	SpiCode = SpiReadByte(AD7792_MODE_REG);	 
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	be df       	rcall	.-132    	; 0x282 <SpiReadByte>
 306:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0xA0);				//	Запускаем FullScale калибровку
 30a:	80 ea       	ldi	r24, 0xA0	; 160
 30c:	ba df       	rcall	.-140    	; 0x282 <SpiReadByte>
 30e:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0x01);							                   
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	b6 df       	rcall	.-148    	; 0x282 <SpiReadByte>
 316:	80 93 8b 01 	sts	0x018B, r24
	while(BitIsSet(SPI_PORT, SPI_PIN_MISO));	//	Ждем конца калибровки
 31a:	2c 99       	sbic	0x05, 4	; 5
 31c:	fe cf       	rjmp	.-4      	; 0x31a <__stack+0x1b>
};
 31e:	08 95       	ret

00000320 <Ad7792SetModeOfConversion>:

void Ad7792SetModeOfConversion(void)				
{
	SpiCode = SpiReadByte(AD7792_MODE_REG);	//	Заходим в Mode регистр
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	af df       	rcall	.-162    	; 0x282 <SpiReadByte>
 324:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0x00);	        // Старший байт - Режим непр. преобразования
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	ab df       	rcall	.-170    	; 0x282 <SpiReadByte>
 32c:	80 93 8b 01 	sts	0x018B, r24
	SpiCode = SpiReadByte(0x01);			// Младший байт - Частота преоб-я 470 Гц
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	a7 df       	rcall	.-178    	; 0x282 <SpiReadByte>
 334:	80 93 8b 01 	sts	0x018B, r24
};
 338:	08 95       	ret

0000033a <Ad7792GetData>:
	};
	SpiCode = SpiReadByte(0x91); 						// Младший байт - Внутренний ИОН, канал 2
}*/

u16 Ad7792GetData(void)				
{
 33a:	cf 93       	push	r28
	u16 b3;				            // Переменная для хранения результата
	u16 b1;				            // Переменная для хранения старшего байта
	u8 b2;				            // Переменная для хранения младшего байта
	
	while(BitIsSet(SPI_PORT, SPI_PIN_MISO));	// Ждем когда данные подготовятся
 33c:	2c 99       	sbic	0x05, 4	; 5
 33e:	fe cf       	rjmp	.-4      	; 0x33c <Ad7792GetData+0x2>
	SpiCode = SpiReadByte(0x58);				// Заходим в DATA REG
 340:	88 e5       	ldi	r24, 0x58	; 88
 342:	9f df       	rcall	.-194    	; 0x282 <SpiReadByte>
 344:	80 93 8b 01 	sts	0x018B, r24
	b1 = SpiReadByte(0xFF);						// Получаем старший байт данных
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	9b df       	rcall	.-202    	; 0x282 <SpiReadByte>
 34c:	c8 2f       	mov	r28, r24
	b2 = SpiReadByte(0xFF);						// Младший байт данных
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	98 df       	rcall	.-208    	; 0x282 <SpiReadByte>
	b3 = (b2 | (b1 << 8));						// Формируем байт данных
 352:	3c 2f       	mov	r19, r28
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	28 2b       	or	r18, r24
 35a:	39 2b       	or	r19, r25
	return b3;									// Отправь данные
};
 35c:	82 2f       	mov	r24, r18
 35e:	93 2f       	mov	r25, r19
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <GetAdcCode>:
	Voltage_uV_Dc = (Voltage_uV_Dc / RangeDivDc[CurrentRange]); // Получаем напр. в мкВ		(Пример 123100 мкВ)
	*/
};

u16 GetAdcCode(u16 nmbr) 
{ 
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	8c 01       	movw	r16, r24
	u32 res3; 
	res3 = Ad7792GetData();
 376:	e1 df       	rcall	.-62     	; 0x33a <Ad7792GetData>
 378:	6c 01       	movw	r12, r24
 37a:	ee 24       	eor	r14, r14
 37c:	ff 24       	eor	r15, r15
	for (u16 t = 1; t < nmbr; t++)
 37e:	02 30       	cpi	r16, 0x02	; 2
 380:	11 05       	cpc	r17, r1
 382:	88 f0       	brcs	.+34     	; 0x3a6 <GetAdcCode+0x42>
 384:	c1 e0       	ldi	r28, 0x01	; 1
 386:	d0 e0       	ldi	r29, 0x00	; 0
	{
		res3 = (res3 + Ad7792GetData())/2;
 388:	d8 df       	rcall	.-80     	; 0x33a <Ad7792GetData>
 38a:	a0 e0       	ldi	r26, 0x00	; 0
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	c8 0e       	add	r12, r24
 390:	d9 1e       	adc	r13, r25
 392:	ea 1e       	adc	r14, r26
 394:	fb 1e       	adc	r15, r27
 396:	f6 94       	lsr	r15
 398:	e7 94       	ror	r14
 39a:	d7 94       	ror	r13
 39c:	c7 94       	ror	r12

u16 GetAdcCode(u16 nmbr) 
{ 
	u32 res3; 
	res3 = Ad7792GetData();
	for (u16 t = 1; t < nmbr; t++)
 39e:	21 96       	adiw	r28, 0x01	; 1
 3a0:	c0 17       	cp	r28, r16
 3a2:	d1 07       	cpc	r29, r17
 3a4:	89 f7       	brne	.-30     	; 0x388 <GetAdcCode+0x24>
	{
		res3 = (res3 + Ad7792GetData())/2;
	}
	return res3;
};
 3a6:	8c 2d       	mov	r24, r12
 3a8:	9d 2d       	mov	r25, r13
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	08 95       	ret

000003bc <GetAdcVoltage_nV>:

s32 GetAdcVoltage_nV (void) 
{
	s32 res;                                    // Temp для результата
	AdcCode_u16 = GetAdcCode(NUMBER_OF_MEASURE);// Получили код АЦП
 3bc:	80 e1       	ldi	r24, 0x10	; 16
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	d1 df       	rcall	.-94     	; 0x364 <GetAdcCode>
 3c2:	90 93 8a 01 	sts	0x018A, r25
 3c6:	80 93 89 01 	sts	0x0189, r24
	res = (s32*)(AdcCode_u16 - AdcCodeZero);	// Получили БП код
 3ca:	a0 e0       	ldi	r26, 0x00	; 0
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	80 50       	subi	r24, 0x00	; 0
 3d0:	90 48       	sbci	r25, 0x80	; 128
 3d2:	a0 40       	sbci	r26, 0x00	; 0
 3d4:	b0 40       	sbci	r27, 0x00	; 0
 3d6:	9c 01       	movw	r18, r24
 3d8:	b9 01       	movw	r22, r18
 3da:	88 27       	eor	r24, r24
 3dc:	77 fd       	sbrc	r23, 7
 3de:	80 95       	com	r24
 3e0:	98 2f       	mov	r25, r24
	res = res * AdcStep + AdcBias;				// Умножаем на шаг АЦП и добавляем смещение
 3e2:	2a e7       	ldi	r18, 0x7A	; 122
 3e4:	3b e8       	ldi	r19, 0x8B	; 139
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	64 d0       	rcall	.+200    	; 0x4b4 <__mulsi3>
	return res;
};
 3ec:	08 95       	ret

000003ee <Measure>:
		Comm(); 
    };
};

void Measure (void)
{
 3ee:	cf 92       	push	r12
 3f0:	df 92       	push	r13
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
			SetRangeDc(CurrentRange);
			_delay_ms(DELAY_AFTER_SET_RANGE);   // Избавляемся от инерционности 
			AdcVoltage_nV_Dc = GetAdcVoltage_nV();
		};
	};*/
	Ad7792SetInput(0x00, 0x90);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	60 e9       	ldi	r22, 0x90	; 144
 3fe:	60 df       	rcall	.-320    	; 0x2c0 <Ad7792SetInput>
	Ad7792Calibration();
 400:	72 df       	rcall	.-284    	; 0x2e6 <Ad7792Calibration>
	Ad7792SetModeOfConversion();
 402:	8e df       	rcall	.-228    	; 0x320 <Ad7792SetModeOfConversion>
	CurrentRange = RANGE_LOW;
 404:	10 92 7c 01 	sts	0x017C, r1
	SetRangeAc(CurrentRange);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	56 de       	rcall	.-852    	; 0xb8 <SetRangeAc>
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	95 ea       	ldi	r25, 0xA5	; 165
 410:	ae e0       	ldi	r26, 0x0E	; 14
 412:	81 50       	subi	r24, 0x01	; 1
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	a0 40       	sbci	r26, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <Measure+0x24>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <Measure+0x2e>
 41c:	00 00       	nop
	_delay_ms(DELAY_AFTER_SET_RANGE);               // Избавляемся от инерционности 
	AdcVoltage_nV_Ac = 0;
 41e:	10 92 81 01 	sts	0x0181, r1
 422:	10 92 82 01 	sts	0x0182, r1
 426:	10 92 83 01 	sts	0x0183, r1
 42a:	10 92 84 01 	sts	0x0184, r1
	AdcVoltage_nV_Ac = GetAdcVoltage_nV();             // Получили напр. в нВ
 42e:	c6 df       	rcall	.-116    	; 0x3bc <GetAdcVoltage_nV>
 430:	60 93 81 01 	sts	0x0181, r22
 434:	70 93 82 01 	sts	0x0182, r23
 438:	80 93 83 01 	sts	0x0183, r24
 43c:	90 93 84 01 	sts	0x0184, r25
		};
	};*/
	
	Voltage_uV_Ac = 0;
	Voltage_uV_Ac = AdcVoltage_nV_Ac / CommonDev;				// Получаем напр. в мВ		(Пример 123.1 мВ)
	Voltage_uV_Ac = (Voltage_uV_Ac * RangeKefAc[CurrentRange]); // Умножаем на кэф делителя	(Пример 1231000)
 440:	c0 91 7c 01 	lds	r28, 0x017C
 444:	d0 e0       	ldi	r29, 0x00	; 0
			AdcVoltage_nV_Ac = GetAdcVoltage_nV();
		};
	};*/
	
	Voltage_uV_Ac = 0;
	Voltage_uV_Ac = AdcVoltage_nV_Ac / CommonDev;				// Получаем напр. в мВ		(Пример 123.1 мВ)
 446:	20 ea       	ldi	r18, 0xA0	; 160
 448:	36 e8       	ldi	r19, 0x86	; 134
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	51 d0       	rcall	.+162    	; 0x4f2 <__divmodsi4>
 450:	69 01       	movw	r12, r18
 452:	7a 01       	movw	r14, r20
	Voltage_uV_Ac = (Voltage_uV_Ac * RangeKefAc[CurrentRange]); // Умножаем на кэф делителя	(Пример 1231000)
 454:	cc 0f       	add	r28, r28
 456:	dd 1f       	adc	r29, r29
 458:	cc 0f       	add	r28, r28
 45a:	dd 1f       	adc	r29, r29
 45c:	fe 01       	movw	r30, r28
 45e:	e4 5e       	subi	r30, 0xE4	; 228
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	20 81       	ld	r18, Z
 464:	31 81       	ldd	r19, Z+1	; 0x01
 466:	42 81       	ldd	r20, Z+2	; 0x02
 468:	53 81       	ldd	r21, Z+3	; 0x03
 46a:	c7 01       	movw	r24, r14
 46c:	b6 01       	movw	r22, r12
 46e:	22 d0       	rcall	.+68     	; 0x4b4 <__mulsi3>
	Voltage_uV_Ac = (Voltage_uV_Ac / RangeDivAc[CurrentRange]); // Получаем напр. в мкВ		(Пример 123100 мкВ)
 470:	c0 5d       	subi	r28, 0xD0	; 208
 472:	de 4f       	sbci	r29, 0xFE	; 254
 474:	28 81       	ld	r18, Y
 476:	39 81       	ldd	r19, Y+1	; 0x01
 478:	4a 81       	ldd	r20, Y+2	; 0x02
 47a:	5b 81       	ldd	r21, Y+3	; 0x03
 47c:	3a d0       	rcall	.+116    	; 0x4f2 <__divmodsi4>
 47e:	20 93 a4 01 	sts	0x01A4, r18
 482:	30 93 a5 01 	sts	0x01A5, r19
 486:	40 93 a6 01 	sts	0x01A6, r20
 48a:	50 93 a7 01 	sts	0x01A7, r21
	Voltage_uV_Dc = 0;
	Voltage_uV_Dc = AdcVoltage_nV_Dc / CommonDev;				// Получаем напр. в мВ		(Пример 123.1 мВ)
	Voltage_uV_Dc = (Voltage_uV_Dc * RangeKefDc[CurrentRange]); // Умножаем на кэф делителя	(Пример 1231000)
	Voltage_uV_Dc = (Voltage_uV_Dc / RangeDivDc[CurrentRange]); // Получаем напр. в мкВ		(Пример 123100 мкВ)
	*/
};
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	08 95       	ret

0000049c <main>:
﻿
#include "DVM.h"

int main(void)
{
	PortsInit();
 49c:	d9 de       	rcall	.-590    	; 0x250 <PortsInit>
	UartInit();
 49e:	ca de       	rcall	.-620    	; 0x234 <UartInit>
	SpiInitMaster();
 4a0:	de de       	rcall	.-580    	; 0x25e <SpiInitMaster>
	Ad7792Reset();
 4a2:	f7 de       	rcall	.-530    	; 0x292 <Ad7792Reset>
	Ad7792SetInput(0x00, 0x91);
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	61 e9       	ldi	r22, 0x91	; 145
 4a8:	0b df       	rcall	.-490    	; 0x2c0 <Ad7792SetInput>
	Ad7792Calibration();
 4aa:	1d df       	rcall	.-454    	; 0x2e6 <Ad7792Calibration>
	Ad7792SetModeOfConversion();
 4ac:	39 df       	rcall	.-398    	; 0x320 <Ad7792SetModeOfConversion>
    while(1)
    {
        Measure();
 4ae:	9f df       	rcall	.-194    	; 0x3ee <Measure>
		Comm(); 
 4b0:	91 de       	rcall	.-734    	; 0x1d4 <Comm>
 4b2:	fd cf       	rjmp	.-6      	; 0x4ae <main+0x12>

000004b4 <__mulsi3>:
 4b4:	62 9f       	mul	r22, r18
 4b6:	d0 01       	movw	r26, r0
 4b8:	73 9f       	mul	r23, r19
 4ba:	f0 01       	movw	r30, r0
 4bc:	82 9f       	mul	r24, r18
 4be:	e0 0d       	add	r30, r0
 4c0:	f1 1d       	adc	r31, r1
 4c2:	64 9f       	mul	r22, r20
 4c4:	e0 0d       	add	r30, r0
 4c6:	f1 1d       	adc	r31, r1
 4c8:	92 9f       	mul	r25, r18
 4ca:	f0 0d       	add	r31, r0
 4cc:	83 9f       	mul	r24, r19
 4ce:	f0 0d       	add	r31, r0
 4d0:	74 9f       	mul	r23, r20
 4d2:	f0 0d       	add	r31, r0
 4d4:	65 9f       	mul	r22, r21
 4d6:	f0 0d       	add	r31, r0
 4d8:	99 27       	eor	r25, r25
 4da:	72 9f       	mul	r23, r18
 4dc:	b0 0d       	add	r27, r0
 4de:	e1 1d       	adc	r30, r1
 4e0:	f9 1f       	adc	r31, r25
 4e2:	63 9f       	mul	r22, r19
 4e4:	b0 0d       	add	r27, r0
 4e6:	e1 1d       	adc	r30, r1
 4e8:	f9 1f       	adc	r31, r25
 4ea:	bd 01       	movw	r22, r26
 4ec:	cf 01       	movw	r24, r30
 4ee:	11 24       	eor	r1, r1
 4f0:	08 95       	ret

000004f2 <__divmodsi4>:
 4f2:	97 fb       	bst	r25, 7
 4f4:	09 2e       	mov	r0, r25
 4f6:	05 26       	eor	r0, r21
 4f8:	0e d0       	rcall	.+28     	; 0x516 <__divmodsi4_neg1>
 4fa:	57 fd       	sbrc	r21, 7
 4fc:	04 d0       	rcall	.+8      	; 0x506 <__divmodsi4_neg2>
 4fe:	14 d0       	rcall	.+40     	; 0x528 <__udivmodsi4>
 500:	0a d0       	rcall	.+20     	; 0x516 <__divmodsi4_neg1>
 502:	00 1c       	adc	r0, r0
 504:	38 f4       	brcc	.+14     	; 0x514 <__divmodsi4_exit>

00000506 <__divmodsi4_neg2>:
 506:	50 95       	com	r21
 508:	40 95       	com	r20
 50a:	30 95       	com	r19
 50c:	21 95       	neg	r18
 50e:	3f 4f       	sbci	r19, 0xFF	; 255
 510:	4f 4f       	sbci	r20, 0xFF	; 255
 512:	5f 4f       	sbci	r21, 0xFF	; 255

00000514 <__divmodsi4_exit>:
 514:	08 95       	ret

00000516 <__divmodsi4_neg1>:
 516:	f6 f7       	brtc	.-4      	; 0x514 <__divmodsi4_exit>
 518:	90 95       	com	r25
 51a:	80 95       	com	r24
 51c:	70 95       	com	r23
 51e:	61 95       	neg	r22
 520:	7f 4f       	sbci	r23, 0xFF	; 255
 522:	8f 4f       	sbci	r24, 0xFF	; 255
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	08 95       	ret

00000528 <__udivmodsi4>:
 528:	a1 e2       	ldi	r26, 0x21	; 33
 52a:	1a 2e       	mov	r1, r26
 52c:	aa 1b       	sub	r26, r26
 52e:	bb 1b       	sub	r27, r27
 530:	fd 01       	movw	r30, r26
 532:	0d c0       	rjmp	.+26     	; 0x54e <__udivmodsi4_ep>

00000534 <__udivmodsi4_loop>:
 534:	aa 1f       	adc	r26, r26
 536:	bb 1f       	adc	r27, r27
 538:	ee 1f       	adc	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	a2 17       	cp	r26, r18
 53e:	b3 07       	cpc	r27, r19
 540:	e4 07       	cpc	r30, r20
 542:	f5 07       	cpc	r31, r21
 544:	20 f0       	brcs	.+8      	; 0x54e <__udivmodsi4_ep>
 546:	a2 1b       	sub	r26, r18
 548:	b3 0b       	sbc	r27, r19
 54a:	e4 0b       	sbc	r30, r20
 54c:	f5 0b       	sbc	r31, r21

0000054e <__udivmodsi4_ep>:
 54e:	66 1f       	adc	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	1a 94       	dec	r1
 558:	69 f7       	brne	.-38     	; 0x534 <__udivmodsi4_loop>
 55a:	60 95       	com	r22
 55c:	70 95       	com	r23
 55e:	80 95       	com	r24
 560:	90 95       	com	r25
 562:	9b 01       	movw	r18, r22
 564:	ac 01       	movw	r20, r24
 566:	bd 01       	movw	r22, r26
 568:	cf 01       	movw	r24, r30
 56a:	08 95       	ret

0000056c <memset>:
 56c:	dc 01       	movw	r26, r24
 56e:	01 c0       	rjmp	.+2      	; 0x572 <memset+0x6>
 570:	6d 93       	st	X+, r22
 572:	41 50       	subi	r20, 0x01	; 1
 574:	50 40       	sbci	r21, 0x00	; 0
 576:	e0 f7       	brcc	.-8      	; 0x570 <memset+0x4>
 578:	08 95       	ret

0000057a <ltoa>:
 57a:	fa 01       	movw	r30, r20
 57c:	cf 93       	push	r28
 57e:	ff 93       	push	r31
 580:	ef 93       	push	r30
 582:	22 30       	cpi	r18, 0x02	; 2
 584:	3c f1       	brlt	.+78     	; 0x5d4 <ltoa+0x5a>
 586:	25 32       	cpi	r18, 0x25	; 37
 588:	2c f5       	brge	.+74     	; 0x5d4 <ltoa+0x5a>
 58a:	c2 2f       	mov	r28, r18
 58c:	e8 94       	clt
 58e:	ca 30       	cpi	r28, 0x0A	; 10
 590:	49 f4       	brne	.+18     	; 0x5a4 <ltoa+0x2a>
 592:	97 fb       	bst	r25, 7
 594:	3e f4       	brtc	.+14     	; 0x5a4 <ltoa+0x2a>
 596:	90 95       	com	r25
 598:	80 95       	com	r24
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	2c 2f       	mov	r18, r28
 5a6:	33 27       	eor	r19, r19
 5a8:	44 27       	eor	r20, r20
 5aa:	55 27       	eor	r21, r21
 5ac:	ff 93       	push	r31
 5ae:	ef 93       	push	r30
 5b0:	bb df       	rcall	.-138    	; 0x528 <__udivmodsi4>
 5b2:	ef 91       	pop	r30
 5b4:	ff 91       	pop	r31
 5b6:	60 5d       	subi	r22, 0xD0	; 208
 5b8:	6a 33       	cpi	r22, 0x3A	; 58
 5ba:	0c f0       	brlt	.+2      	; 0x5be <ltoa+0x44>
 5bc:	69 5d       	subi	r22, 0xD9	; 217
 5be:	61 93       	st	Z+, r22
 5c0:	b9 01       	movw	r22, r18
 5c2:	ca 01       	movw	r24, r20
 5c4:	60 50       	subi	r22, 0x00	; 0
 5c6:	70 40       	sbci	r23, 0x00	; 0
 5c8:	80 40       	sbci	r24, 0x00	; 0
 5ca:	90 40       	sbci	r25, 0x00	; 0
 5cc:	59 f7       	brne	.-42     	; 0x5a4 <ltoa+0x2a>
 5ce:	16 f4       	brtc	.+4      	; 0x5d4 <ltoa+0x5a>
 5d0:	cd e2       	ldi	r28, 0x2D	; 45
 5d2:	c1 93       	st	Z+, r28
 5d4:	10 82       	st	Z, r1
 5d6:	8f 91       	pop	r24
 5d8:	9f 91       	pop	r25
 5da:	cf 91       	pop	r28
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <strrev>

000005de <strrev>:
 5de:	dc 01       	movw	r26, r24
 5e0:	fc 01       	movw	r30, r24
 5e2:	67 2f       	mov	r22, r23
 5e4:	71 91       	ld	r23, Z+
 5e6:	77 23       	and	r23, r23
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <strrev+0x4>
 5ea:	32 97       	sbiw	r30, 0x02	; 2
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <strrev+0x18>
 5ee:	7c 91       	ld	r23, X
 5f0:	6d 93       	st	X+, r22
 5f2:	70 83       	st	Z, r23
 5f4:	62 91       	ld	r22, -Z
 5f6:	ae 17       	cp	r26, r30
 5f8:	bf 07       	cpc	r27, r31
 5fa:	c8 f3       	brcs	.-14     	; 0x5ee <strrev+0x10>
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
