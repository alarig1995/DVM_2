
DVM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000005e8  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800140  00800140  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114a  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000892  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000792  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000598  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000709  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 ee       	ldi	r30, 0xE8	; 232
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 34       	cpi	r26, 0x40	; 64
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e4       	ldi	r26, 0x40	; 64
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 36       	cpi	r26, 0x68	; 104
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	05 d2       	rcall	.+1034   	; 0x472 <main>
  68:	bd c2       	rjmp	.+1402   	; 0x5e4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <SetRange>:
	default:
		SpiCode = SpiReadByte(AD7792_CONF_REG_GAIN_1);
		break;
	};
	SpiCode = SpiReadByte(0x91); 						// Младший байт - Внутренний ИОН, канал 2
}
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	99 f0       	breq	.+38     	; 0x96 <SetRange+0x2a>
  70:	28 f4       	brcc	.+10     	; 0x7c <SetRange+0x10>
  72:	88 23       	and	r24, r24
  74:	41 f0       	breq	.+16     	; 0x86 <SetRange+0x1a>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	51 f0       	breq	.+20     	; 0x8e <SetRange+0x22>
  7a:	19 c0       	rjmp	.+50     	; 0xae <SetRange+0x42>
  7c:	83 30       	cpi	r24, 0x03	; 3
  7e:	79 f0       	breq	.+30     	; 0x9e <SetRange+0x32>
  80:	84 30       	cpi	r24, 0x04	; 4
  82:	89 f0       	breq	.+34     	; 0xa6 <SetRange+0x3a>
  84:	14 c0       	rjmp	.+40     	; 0xae <SetRange+0x42>
  86:	5d 98       	cbi	0x0b, 5	; 11
  88:	5d 98       	cbi	0x0b, 5	; 11
  8a:	2f 98       	cbi	0x05, 7	; 5
  8c:	08 95       	ret
  8e:	5d 9a       	sbi	0x0b, 5	; 11
  90:	5d 9a       	sbi	0x0b, 5	; 11
  92:	2f 9a       	sbi	0x05, 7	; 5
  94:	08 95       	ret
  96:	5d 98       	cbi	0x0b, 5	; 11
  98:	5d 9a       	sbi	0x0b, 5	; 11
  9a:	2f 9a       	sbi	0x05, 7	; 5
  9c:	08 95       	ret
  9e:	5d 9a       	sbi	0x0b, 5	; 11
  a0:	5d 98       	cbi	0x0b, 5	; 11
  a2:	2f 9a       	sbi	0x05, 7	; 5
  a4:	08 95       	ret
  a6:	5d 98       	cbi	0x0b, 5	; 11
  a8:	5d 98       	cbi	0x0b, 5	; 11
  aa:	2f 9a       	sbi	0x05, 7	; 5
  ac:	08 95       	ret
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	5d 98       	cbi	0x0b, 5	; 11
  b2:	2f 98       	cbi	0x05, 7	; 5
  b4:	08 95       	ret

000000b6 <VoltageToString>:
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	6b 01       	movw	r12, r22
  c4:	7c 01       	movw	r14, r24
  c6:	ea 01       	movw	r28, r20
  c8:	77 23       	and	r23, r23
  ca:	24 f4       	brge	.+8      	; 0xd4 <VoltageToString+0x1e>
  cc:	66 27       	eor	r22, r22
  ce:	77 27       	eor	r23, r23
  d0:	6c 19       	sub	r22, r12
  d2:	7d 09       	sbc	r23, r13
  d4:	cb 01       	movw	r24, r22
  d6:	77 0f       	add	r23, r23
  d8:	aa 0b       	sbc	r26, r26
  da:	bb 0b       	sbc	r27, r27
  dc:	bc 01       	movw	r22, r24
  de:	cd 01       	movw	r24, r26
  e0:	76 53       	subi	r23, 0x36	; 54
  e2:	85 46       	sbci	r24, 0x65	; 101
  e4:	94 4c       	sbci	r25, 0xC4	; 196
  e6:	2a e0       	ldi	r18, 0x0A	; 10
  e8:	ae 01       	movw	r20, r28
  ea:	3d d2       	rcall	.+1146   	; 0x566 <__ltoa_ncheck>
  ec:	1c 14       	cp	r1, r12
  ee:	1d 04       	cpc	r1, r13
  f0:	1e 04       	cpc	r1, r14
  f2:	1f 04       	cpc	r1, r15
  f4:	1c f4       	brge	.+6      	; 0xfc <VoltageToString+0x46>
  f6:	8b e2       	ldi	r24, 0x2B	; 43
  f8:	88 83       	st	Y, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <VoltageToString+0x4a>
  fc:	8d e2       	ldi	r24, 0x2D	; 45
  fe:	88 83       	st	Y, r24
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	ff 90       	pop	r15
 106:	ef 90       	pop	r14
 108:	df 90       	pop	r13
 10a:	cf 90       	pop	r12
 10c:	08 95       	ret

0000010e <TerminalPrepare>:
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
 11c:	69 01       	movw	r12, r18
 11e:	7a 01       	movw	r14, r20
 120:	ab 01       	movw	r20, r22
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	18 d2       	rcall	.+1072   	; 0x558 <memset>
 128:	ae 01       	movw	r20, r28
 12a:	c7 01       	movw	r24, r14
 12c:	b6 01       	movw	r22, r12
 12e:	c3 df       	rcall	.-122    	; 0xb6 <VoltageToString>
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	ff 90       	pop	r15
 136:	ef 90       	pop	r14
 138:	df 90       	pop	r13
 13a:	cf 90       	pop	r12
 13c:	08 95       	ret

0000013e <UartSendByte>:
 13e:	e0 ec       	ldi	r30, 0xC0	; 192
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	90 81       	ld	r25, Z
 144:	95 ff       	sbrs	r25, 5
 146:	fd cf       	rjmp	.-6      	; 0x142 <UartSendByte+0x4>
 148:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 14c:	08 95       	ret

0000014e <UartlSendString>:
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	ec 01       	movw	r28, r24
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	29 f0       	breq	.+10     	; 0x164 <UartlSendString+0x16>
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	f0 df       	rcall	.-32     	; 0x13e <UartSendByte>
 15e:	89 91       	ld	r24, Y+
 160:	81 11       	cpse	r24, r1
 162:	fc cf       	rjmp	.-8      	; 0x15c <UartlSendString+0xe>
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <UartSendNewLine>:
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	e8 df       	rcall	.-48     	; 0x13e <UartSendByte>
 16e:	8d e0       	ldi	r24, 0x0D	; 13
 170:	e6 df       	rcall	.-52     	; 0x13e <UartSendByte>
 172:	08 95       	ret

00000174 <Comm>:
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	e0 e5       	ldi	r30, 0x50	; 80
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	df 01       	movw	r26, r30
 17c:	1d 92       	st	X+, r1
 17e:	8a 95       	dec	r24
 180:	e9 f7       	brne	.-6      	; 0x17c <Comm+0x8>
 182:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <AdcVoltage_nV>
 186:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <AdcVoltage_nV+0x1>
 18a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <AdcVoltage_nV+0x2>
 18e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <AdcVoltage_nV+0x3>
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	af 01       	movw	r20, r30
 196:	e7 d1       	rcall	.+974    	; 0x566 <__ltoa_ncheck>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	d8 df       	rcall	.-80     	; 0x14e <UartlSendString>
 19e:	80 e5       	ldi	r24, 0x50	; 80
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	d5 df       	rcall	.-86     	; 0x14e <UartlSendString>
 1a4:	e2 df       	rcall	.-60     	; 0x16a <UartSendNewLine>
 1a6:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <Voltage_uV>
 1aa:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <Voltage_uV+0x1>
 1ae:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <Voltage_uV+0x2>
 1b2:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <Voltage_uV+0x3>
 1b6:	68 e1       	ldi	r22, 0x18	; 24
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	80 e5       	ldi	r24, 0x50	; 80
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	a7 df       	rcall	.-178    	; 0x10e <TerminalPrepare>
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	c4 df       	rcall	.-120    	; 0x14e <UartlSendString>
 1c6:	80 e5       	ldi	r24, 0x50	; 80
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	c1 df       	rcall	.-126    	; 0x14e <UartlSendString>
 1cc:	ce df       	rcall	.-100    	; 0x16a <UartSendNewLine>
 1ce:	08 95       	ret

000001d0 <UartInit>:
 1d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 1d4:	83 e3       	ldi	r24, 0x33	; 51
 1d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 1da:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 1e4:	86 e8       	ldi	r24, 0x86	; 134
 1e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
 1ea:	08 95       	ret

000001ec <PortsInit>:
 1ec:	27 9a       	sbi	0x04, 7	; 4
 1ee:	55 9a       	sbi	0x0a, 5	; 10
 1f0:	55 9a       	sbi	0x0a, 5	; 10
 1f2:	08 95       	ret

000001f4 <SpiInitMaster>:
 1f4:	22 9a       	sbi	0x04, 2	; 4
 1f6:	23 9a       	sbi	0x04, 3	; 4
 1f8:	25 9a       	sbi	0x04, 5	; 4
 1fa:	24 98       	cbi	0x04, 4	; 4
 1fc:	8c b5       	in	r24, 0x2c	; 44
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	8c bd       	out	0x2c, r24	; 44
 202:	8c b5       	in	r24, 0x2c	; 44
 204:	88 60       	ori	r24, 0x08	; 8
 206:	8c bd       	out	0x2c, r24	; 44
 208:	8c b5       	in	r24, 0x2c	; 44
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	8c bd       	out	0x2c, r24	; 44
 20e:	8c b5       	in	r24, 0x2c	; 44
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8c bd       	out	0x2c, r24	; 44
 214:	2a 9a       	sbi	0x05, 2	; 5
 216:	08 95       	ret

00000218 <SpiReadByte>:
 218:	2a 98       	cbi	0x05, 2	; 5
 21a:	8e bd       	out	0x2e, r24	; 46
 21c:	0d b4       	in	r0, 0x2d	; 45
 21e:	07 fe       	sbrs	r0, 7
 220:	fd cf       	rjmp	.-6      	; 0x21c <SpiReadByte+0x4>
 222:	8e b5       	in	r24, 0x2e	; 46
 224:	2a 9a       	sbi	0x05, 2	; 5
 226:	08 95       	ret

00000228 <Ad7792Reset>:
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	f6 df       	rcall	.-20     	; 0x218 <SpiReadByte>
 22c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	f2 df       	rcall	.-28     	; 0x218 <SpiReadByte>
 234:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	ee df       	rcall	.-36     	; 0x218 <SpiReadByte>
 23c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	ea df       	rcall	.-44     	; 0x218 <SpiReadByte>
 244:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	9e e4       	ldi	r25, 0x4E	; 78
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <Ad7792Reset+0x24>
 250:	00 c0       	rjmp	.+0      	; 0x252 <Ad7792Reset+0x2a>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <Ad7792SetInput>:
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	df df       	rcall	.-66     	; 0x218 <SpiReadByte>
 25a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	db df       	rcall	.-74     	; 0x218 <SpiReadByte>
 262:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 266:	81 e9       	ldi	r24, 0x91	; 145
 268:	d7 df       	rcall	.-82     	; 0x218 <SpiReadByte>
 26a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 26e:	08 95       	ret

00000270 <Ad7792Calibration>:
 270:	88 e0       	ldi	r24, 0x08	; 8
 272:	d2 df       	rcall	.-92     	; 0x218 <SpiReadByte>
 274:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	ce df       	rcall	.-100    	; 0x218 <SpiReadByte>
 27c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	ca df       	rcall	.-108    	; 0x218 <SpiReadByte>
 284:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 288:	2c 99       	sbic	0x05, 4	; 5
 28a:	fe cf       	rjmp	.-4      	; 0x288 <Ad7792Calibration+0x18>
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	c4 df       	rcall	.-120    	; 0x218 <SpiReadByte>
 290:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 294:	80 ea       	ldi	r24, 0xA0	; 160
 296:	c0 df       	rcall	.-128    	; 0x218 <SpiReadByte>
 298:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	bc df       	rcall	.-136    	; 0x218 <SpiReadByte>
 2a0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 2a4:	2c 99       	sbic	0x05, 4	; 5
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <Ad7792Calibration+0x34>
 2a8:	08 95       	ret

000002aa <Ad7792SetModeOfConversion>:
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	b5 df       	rcall	.-150    	; 0x218 <SpiReadByte>
 2ae:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	b1 df       	rcall	.-158    	; 0x218 <SpiReadByte>
 2b6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	ad df       	rcall	.-166    	; 0x218 <SpiReadByte>
 2be:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
 2c2:	08 95       	ret

000002c4 <Ad7792GetData>:

u16 Ad7792GetData(void)				
{
 2c4:	cf 93       	push	r28
	u16 b3;				            // Переменная для хранения результата
	u16 b1;				            // Переменная для хранения старшего байта
	u8 b2;				            // Переменная для хранения младшего байта
	
	while(BitIsSet(SPI_PORT, SPI_PIN_MISO));	// Ждем когда данные подготовятся
 2c6:	2c 99       	sbic	0x05, 4	; 5
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <Ad7792GetData+0x2>
	SpiCode = SpiReadByte(AD7792_DATA_REG);		// Заходим в DATA REG
 2ca:	88 e5       	ldi	r24, 0x58	; 88
 2cc:	a5 df       	rcall	.-182    	; 0x218 <SpiReadByte>
 2ce:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <SpiCode>
	b1 = SpiReadByte(0xFF);						// Получаем старший байт данных
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	a1 df       	rcall	.-190    	; 0x218 <SpiReadByte>
 2d6:	c8 2f       	mov	r28, r24
	b2 = SpiReadByte(0xFF);						// Младший байт данных
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9e df       	rcall	.-196    	; 0x218 <SpiReadByte>
	b3 = (b2 | (b1 << 8));						// Формируем байт данных
	return b3;									// Отправь данные
 2dc:	2c 2f       	mov	r18, r28
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	32 2f       	mov	r19, r18
 2e2:	22 27       	eor	r18, r18
};
 2e4:	a9 01       	movw	r20, r18
 2e6:	48 2b       	or	r20, r24
 2e8:	ca 01       	movw	r24, r20
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <GetAdcCode>:
	Voltage_uV = (Voltage_uV * RangeKef[CurrentRange]); // Умножаем на кэф делителя
	Voltage_uV = (Voltage_uV / RangeDiv[CurrentRange]);
};

u16 GetAdcCode(u16 nmbr) 
{ 
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	7c 01       	movw	r14, r24
	u16 res3; 
	res3 = Ad7792GetData();
 2fc:	e3 df       	rcall	.-58     	; 0x2c4 <Ad7792GetData>
 2fe:	ec 01       	movw	r28, r24
	for (u16 t = 1; t < nmbr; t++)
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	e8 16       	cp	r14, r24
 304:	f1 04       	cpc	r15, r1
 306:	68 f0       	brcs	.+26     	; 0x322 <__stack+0x23>
 308:	01 e0       	ldi	r16, 0x01	; 1
 30a:	10 e0       	ldi	r17, 0x00	; 0
	{
		res3 = (res3 + Ad7792GetData())/2;
 30c:	db df       	rcall	.-74     	; 0x2c4 <Ad7792GetData>
 30e:	8c 0f       	add	r24, r28
 310:	9d 1f       	adc	r25, r29
 312:	ec 01       	movw	r28, r24
 314:	d6 95       	lsr	r29
 316:	c7 95       	ror	r28

u16 GetAdcCode(u16 nmbr) 
{ 
	u16 res3; 
	res3 = Ad7792GetData();
	for (u16 t = 1; t < nmbr; t++)
 318:	0f 5f       	subi	r16, 0xFF	; 255
 31a:	1f 4f       	sbci	r17, 0xFF	; 255
 31c:	e0 16       	cp	r14, r16
 31e:	f1 06       	cpc	r15, r17
 320:	a9 f7       	brne	.-22     	; 0x30c <__stack+0xd>
	{
		res3 = (res3 + Ad7792GetData())/2;
	}
	return res3;
};
 322:	ce 01       	movw	r24, r28
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <GetAdcVoltage_nV>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	85 ea       	ldi	r24, 0xA5	; 165
 336:	9e e0       	ldi	r25, 0x0E	; 14
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <GetAdcVoltage_nV+0x6>
 340:	00 c0       	rjmp	.+0      	; 0x342 <GetAdcVoltage_nV+0x10>
 342:	00 00       	nop

s32 GetAdcVoltage_nV (void) 
{
	_delay_ms(DelayAfterSetRange);              // Избавляемся от инерционности 
	s32 res;                                    // Temp для результата
	AdcCode_u16 = GetAdcCode(16);				// Получили код АЦП
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	d2 df       	rcall	.-92     	; 0x2ee <GetAdcCode>
 34a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <AdcCode_u16+0x1>
 34e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <AdcCode_u16>
	res = (s32*)(AdcCode_u16 - AdcCodeZero);	// Получили БП код
 352:	a0 e0       	ldi	r26, 0x00	; 0
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	90 58       	subi	r25, 0x80	; 128
 358:	a1 09       	sbc	r26, r1
 35a:	b1 09       	sbc	r27, r1
	res = res * AdcStep + AdcBias;				// Умножаем на шаг АЦП и добавляем смещение
	return res;
 35c:	dc 01       	movw	r26, r24
 35e:	2a e7       	ldi	r18, 0x7A	; 122
 360:	3b e8       	ldi	r19, 0x8B	; 139
 362:	bc d0       	rcall	.+376    	; 0x4dc <__usmulhisi3>
};
 364:	08 95       	ret

00000366 <Measure>:
		Comm(); 
    };
};

void Measure (void)
{
 366:	cf 92       	push	r12
 368:	df 92       	push	r13
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
	CurrentRange = RANGE_LOW;                       // Установили наим. диапазон
 376:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
	SetRange(CurrentRange);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	77 de       	rcall	.-786    	; 0x6c <SetRange>
	AdcVoltage_nV = 0;								
 37e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <AdcVoltage_nV>
 382:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <AdcVoltage_nV+0x1>
 386:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <AdcVoltage_nV+0x2>
 38a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <AdcVoltage_nV+0x3>
	AdcVoltage_nV = GetAdcVoltage_nV();             // Получили напр. в нВ
 38e:	d1 df       	rcall	.-94     	; 0x332 <GetAdcVoltage_nV>
 390:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <AdcVoltage_nV>
 394:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <AdcVoltage_nV+0x1>
 398:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <AdcVoltage_nV+0x2>
 39c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <AdcVoltage_nV+0x3>
	while ((labs(AdcVoltage_nV)) > (AdcVoltage_nV_Max)) // Напр. на АЦП по модулю больше макс? 
	{
		if (CurrentRange > RANGE_MAX)
		{
			AdcVoltage_nV = AdcVoltage_nV_Max;
 3a0:	0f 2e       	mov	r0, r31
 3a2:	c1 2c       	mov	r12, r1
 3a4:	f5 e6       	ldi	r31, 0x65	; 101
 3a6:	df 2e       	mov	r13, r31
 3a8:	fd ec       	ldi	r31, 0xCD	; 205
 3aa:	ef 2e       	mov	r14, r31
 3ac:	fd e1       	ldi	r31, 0x1D	; 29
 3ae:	ff 2e       	mov	r15, r31
 3b0:	f0 2d       	mov	r31, r0
{
	CurrentRange = RANGE_LOW;                       // Установили наим. диапазон
	SetRange(CurrentRange);
	AdcVoltage_nV = 0;								
	AdcVoltage_nV = GetAdcVoltage_nV();             // Получили напр. в нВ
	while ((labs(AdcVoltage_nV)) > (AdcVoltage_nV_Max)) // Напр. на АЦП по модулю больше макс? 
 3b2:	1a c0       	rjmp	.+52     	; 0x3e8 <Measure+0x82>
	{
		if (CurrentRange > RANGE_MAX)
 3b4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 3b8:	85 30       	cpi	r24, 0x05	; 5
 3ba:	48 f0       	brcs	.+18     	; 0x3ce <Measure+0x68>
		{
			AdcVoltage_nV = AdcVoltage_nV_Max;
 3bc:	c0 92 41 01 	sts	0x0141, r12	; 0x800141 <AdcVoltage_nV>
 3c0:	d0 92 42 01 	sts	0x0142, r13	; 0x800142 <AdcVoltage_nV+0x1>
 3c4:	e0 92 43 01 	sts	0x0143, r14	; 0x800143 <AdcVoltage_nV+0x2>
 3c8:	f0 92 44 01 	sts	0x0144, r15	; 0x800144 <AdcVoltage_nV+0x3>
 3cc:	0d c0       	rjmp	.+26     	; 0x3e8 <Measure+0x82>
		}
		else
		{
			CurrentRange++;                     // Следующий диапазон
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
 3d0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
			SetRange(CurrentRange);
 3d4:	4b de       	rcall	.-874    	; 0x6c <SetRange>
			AdcVoltage_nV = GetAdcVoltage_nV();
 3d6:	ad df       	rcall	.-166    	; 0x332 <GetAdcVoltage_nV>
 3d8:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <AdcVoltage_nV>
 3dc:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <AdcVoltage_nV+0x1>
 3e0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <AdcVoltage_nV+0x2>
 3e4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <AdcVoltage_nV+0x3>
{
	CurrentRange = RANGE_LOW;                       // Установили наим. диапазон
	SetRange(CurrentRange);
	AdcVoltage_nV = 0;								
	AdcVoltage_nV = GetAdcVoltage_nV();             // Получили напр. в нВ
	while ((labs(AdcVoltage_nV)) > (AdcVoltage_nV_Max)) // Напр. на АЦП по модулю больше макс? 
 3e8:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <AdcVoltage_nV>
 3ec:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <AdcVoltage_nV+0x1>
 3f0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <AdcVoltage_nV+0x2>
 3f4:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <AdcVoltage_nV+0x3>
 3f8:	8b 01       	movw	r16, r22
 3fa:	9c 01       	movw	r18, r24
 3fc:	99 23       	and	r25, r25
 3fe:	3c f4       	brge	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	00 27       	eor	r16, r16
 402:	11 27       	eor	r17, r17
 404:	98 01       	movw	r18, r16
 406:	06 1b       	sub	r16, r22
 408:	17 0b       	sbc	r17, r23
 40a:	28 0b       	sbc	r18, r24
 40c:	39 0b       	sbc	r19, r25
 40e:	01 30       	cpi	r16, 0x01	; 1
 410:	15 46       	sbci	r17, 0x65	; 101
 412:	2d 4c       	sbci	r18, 0xCD	; 205
 414:	3d 41       	sbci	r19, 0x1D	; 29
 416:	74 f6       	brge	.-100    	; 0x3b4 <Measure+0x4e>
			AdcVoltage_nV = GetAdcVoltage_nV();
		};
	};
	Voltage_uV = 0;
	Voltage_uV = AdcVoltage_nV / CommonDev;				// Получаем напр. в uV
	Voltage_uV = (Voltage_uV * RangeKef[CurrentRange]); // Умножаем на кэф делителя
 418:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <__data_end>
 41c:	10 e0       	ldi	r17, 0x00	; 0
 41e:	00 0f       	add	r16, r16
 420:	11 1f       	adc	r17, r17
 422:	00 0f       	add	r16, r16
 424:	11 1f       	adc	r17, r17
 426:	e8 01       	movw	r28, r16
 428:	c8 5e       	subi	r28, 0xE8	; 232
 42a:	de 4f       	sbci	r29, 0xFE	; 254
	Voltage_uV = (Voltage_uV / RangeDiv[CurrentRange]);
 42c:	20 ea       	ldi	r18, 0xA0	; 160
 42e:	36 e8       	ldi	r19, 0x86	; 134
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	37 d0       	rcall	.+110    	; 0x4a4 <__divmodsi4>
 436:	68 81       	ld	r22, Y
 438:	79 81       	ldd	r23, Y+1	; 0x01
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	9b 81       	ldd	r25, Y+3	; 0x03
 43e:	23 d0       	rcall	.+70     	; 0x486 <__mulsi3>
 440:	f8 01       	movw	r30, r16
 442:	e4 5d       	subi	r30, 0xD4	; 212
 444:	fe 4f       	sbci	r31, 0xFE	; 254
 446:	20 81       	ld	r18, Z
 448:	31 81       	ldd	r19, Z+1	; 0x01
 44a:	42 81       	ldd	r20, Z+2	; 0x02
 44c:	53 81       	ldd	r21, Z+3	; 0x03
 44e:	2a d0       	rcall	.+84     	; 0x4a4 <__divmodsi4>
 450:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <Voltage_uV>
 454:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <Voltage_uV+0x1>
 458:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <Voltage_uV+0x2>
 45c:	50 93 4c 01 	sts	0x014C, r21	; 0x80014c <Voltage_uV+0x3>
};
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	df 90       	pop	r13
 46e:	cf 90       	pop	r12
 470:	08 95       	ret

00000472 <main>:
﻿
#include "DVM.h"

int main(void)
{
	PortsInit();
 472:	bc de       	rcall	.-648    	; 0x1ec <PortsInit>
	UartInit();
 474:	ad de       	rcall	.-678    	; 0x1d0 <UartInit>
	SpiInitMaster();
 476:	be de       	rcall	.-644    	; 0x1f4 <SpiInitMaster>
	Ad7792Reset();
 478:	d7 de       	rcall	.-594    	; 0x228 <Ad7792Reset>
	Ad7792SetInput();
 47a:	ed de       	rcall	.-550    	; 0x256 <Ad7792SetInput>
	Ad7792Calibration();
 47c:	f9 de       	rcall	.-526    	; 0x270 <Ad7792Calibration>
	Ad7792SetModeOfConversion();
 47e:	15 df       	rcall	.-470    	; 0x2aa <Ad7792SetModeOfConversion>
    while(1)
    {
        Measure();
 480:	72 df       	rcall	.-284    	; 0x366 <Measure>
		Comm(); 
 482:	78 de       	rcall	.-784    	; 0x174 <Comm>
 484:	fd cf       	rjmp	.-6      	; 0x480 <main+0xe>

00000486 <__mulsi3>:
 486:	db 01       	movw	r26, r22
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	2d d0       	rcall	.+90     	; 0x4e8 <__muluhisi3>
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	a2 9f       	mul	r26, r18
 494:	80 0d       	add	r24, r0
 496:	91 1d       	adc	r25, r1
 498:	a3 9f       	mul	r26, r19
 49a:	90 0d       	add	r25, r0
 49c:	b2 9f       	mul	r27, r18
 49e:	90 0d       	add	r25, r0
 4a0:	11 24       	eor	r1, r1
 4a2:	08 95       	ret

000004a4 <__divmodsi4>:
 4a4:	05 2e       	mov	r0, r21
 4a6:	97 fb       	bst	r25, 7
 4a8:	16 f4       	brtc	.+4      	; 0x4ae <__divmodsi4+0xa>
 4aa:	00 94       	com	r0
 4ac:	0f d0       	rcall	.+30     	; 0x4cc <__negsi2>
 4ae:	57 fd       	sbrc	r21, 7
 4b0:	05 d0       	rcall	.+10     	; 0x4bc <__divmodsi4_neg2>
 4b2:	24 d0       	rcall	.+72     	; 0x4fc <__udivmodsi4>
 4b4:	07 fc       	sbrc	r0, 7
 4b6:	02 d0       	rcall	.+4      	; 0x4bc <__divmodsi4_neg2>
 4b8:	46 f4       	brtc	.+16     	; 0x4ca <__divmodsi4_exit>
 4ba:	08 c0       	rjmp	.+16     	; 0x4cc <__negsi2>

000004bc <__divmodsi4_neg2>:
 4bc:	50 95       	com	r21
 4be:	40 95       	com	r20
 4c0:	30 95       	com	r19
 4c2:	21 95       	neg	r18
 4c4:	3f 4f       	sbci	r19, 0xFF	; 255
 4c6:	4f 4f       	sbci	r20, 0xFF	; 255
 4c8:	5f 4f       	sbci	r21, 0xFF	; 255

000004ca <__divmodsi4_exit>:
 4ca:	08 95       	ret

000004cc <__negsi2>:
 4cc:	90 95       	com	r25
 4ce:	80 95       	com	r24
 4d0:	70 95       	com	r23
 4d2:	61 95       	neg	r22
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	8f 4f       	sbci	r24, 0xFF	; 255
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	08 95       	ret

000004dc <__usmulhisi3>:
 4dc:	31 d0       	rcall	.+98     	; 0x540 <__umulhisi3>

000004de <__usmulhisi3_tail>:
 4de:	b7 ff       	sbrs	r27, 7
 4e0:	08 95       	ret
 4e2:	82 1b       	sub	r24, r18
 4e4:	93 0b       	sbc	r25, r19
 4e6:	08 95       	ret

000004e8 <__muluhisi3>:
 4e8:	2b d0       	rcall	.+86     	; 0x540 <__umulhisi3>
 4ea:	a5 9f       	mul	r26, r21
 4ec:	90 0d       	add	r25, r0
 4ee:	b4 9f       	mul	r27, r20
 4f0:	90 0d       	add	r25, r0
 4f2:	a4 9f       	mul	r26, r20
 4f4:	80 0d       	add	r24, r0
 4f6:	91 1d       	adc	r25, r1
 4f8:	11 24       	eor	r1, r1
 4fa:	08 95       	ret

000004fc <__udivmodsi4>:
 4fc:	a1 e2       	ldi	r26, 0x21	; 33
 4fe:	1a 2e       	mov	r1, r26
 500:	aa 1b       	sub	r26, r26
 502:	bb 1b       	sub	r27, r27
 504:	fd 01       	movw	r30, r26
 506:	0d c0       	rjmp	.+26     	; 0x522 <__udivmodsi4_ep>

00000508 <__udivmodsi4_loop>:
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	ee 1f       	adc	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	a2 17       	cp	r26, r18
 512:	b3 07       	cpc	r27, r19
 514:	e4 07       	cpc	r30, r20
 516:	f5 07       	cpc	r31, r21
 518:	20 f0       	brcs	.+8      	; 0x522 <__udivmodsi4_ep>
 51a:	a2 1b       	sub	r26, r18
 51c:	b3 0b       	sbc	r27, r19
 51e:	e4 0b       	sbc	r30, r20
 520:	f5 0b       	sbc	r31, r21

00000522 <__udivmodsi4_ep>:
 522:	66 1f       	adc	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a 94       	dec	r1
 52c:	69 f7       	brne	.-38     	; 0x508 <__udivmodsi4_loop>
 52e:	60 95       	com	r22
 530:	70 95       	com	r23
 532:	80 95       	com	r24
 534:	90 95       	com	r25
 536:	9b 01       	movw	r18, r22
 538:	ac 01       	movw	r20, r24
 53a:	bd 01       	movw	r22, r26
 53c:	cf 01       	movw	r24, r30
 53e:	08 95       	ret

00000540 <__umulhisi3>:
 540:	a2 9f       	mul	r26, r18
 542:	b0 01       	movw	r22, r0
 544:	b3 9f       	mul	r27, r19
 546:	c0 01       	movw	r24, r0
 548:	a3 9f       	mul	r26, r19
 54a:	01 d0       	rcall	.+2      	; 0x54e <__umulhisi3+0xe>
 54c:	b2 9f       	mul	r27, r18
 54e:	70 0d       	add	r23, r0
 550:	81 1d       	adc	r24, r1
 552:	11 24       	eor	r1, r1
 554:	91 1d       	adc	r25, r1
 556:	08 95       	ret

00000558 <memset>:
 558:	dc 01       	movw	r26, r24
 55a:	01 c0       	rjmp	.+2      	; 0x55e <memset+0x6>
 55c:	6d 93       	st	X+, r22
 55e:	41 50       	subi	r20, 0x01	; 1
 560:	50 40       	sbci	r21, 0x00	; 0
 562:	e0 f7       	brcc	.-8      	; 0x55c <memset+0x4>
 564:	08 95       	ret

00000566 <__ltoa_ncheck>:
 566:	bb 27       	eor	r27, r27
 568:	2a 30       	cpi	r18, 0x0A	; 10
 56a:	51 f4       	brne	.+20     	; 0x580 <__ltoa_ncheck+0x1a>
 56c:	99 23       	and	r25, r25
 56e:	42 f4       	brpl	.+16     	; 0x580 <__ltoa_ncheck+0x1a>
 570:	bd e2       	ldi	r27, 0x2D	; 45
 572:	90 95       	com	r25
 574:	80 95       	com	r24
 576:	70 95       	com	r23
 578:	61 95       	neg	r22
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	01 c0       	rjmp	.+2      	; 0x584 <__ultoa_common>

00000582 <__ultoa_ncheck>:
 582:	bb 27       	eor	r27, r27

00000584 <__ultoa_common>:
 584:	fa 01       	movw	r30, r20
 586:	a6 2f       	mov	r26, r22
 588:	62 17       	cp	r22, r18
 58a:	71 05       	cpc	r23, r1
 58c:	81 05       	cpc	r24, r1
 58e:	91 05       	cpc	r25, r1
 590:	33 0b       	sbc	r19, r19
 592:	30 fb       	bst	r19, 0
 594:	66 f0       	brts	.+24     	; 0x5ae <__ultoa_common+0x2a>
 596:	aa 27       	eor	r26, r26
 598:	66 0f       	add	r22, r22
 59a:	77 1f       	adc	r23, r23
 59c:	88 1f       	adc	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	aa 1f       	adc	r26, r26
 5a2:	a2 17       	cp	r26, r18
 5a4:	10 f0       	brcs	.+4      	; 0x5aa <__ultoa_common+0x26>
 5a6:	a2 1b       	sub	r26, r18
 5a8:	63 95       	inc	r22
 5aa:	38 50       	subi	r19, 0x08	; 8
 5ac:	a9 f7       	brne	.-22     	; 0x598 <__ultoa_common+0x14>
 5ae:	a0 5d       	subi	r26, 0xD0	; 208
 5b0:	aa 33       	cpi	r26, 0x3A	; 58
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <__ultoa_common+0x32>
 5b4:	a9 5d       	subi	r26, 0xD9	; 217
 5b6:	a1 93       	st	Z+, r26
 5b8:	36 f7       	brtc	.-52     	; 0x586 <__ultoa_common+0x2>
 5ba:	b1 11       	cpse	r27, r1
 5bc:	b1 93       	st	Z+, r27
 5be:	10 82       	st	Z, r1
 5c0:	ca 01       	movw	r24, r20
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <strrev>

000005c4 <strrev>:
 5c4:	dc 01       	movw	r26, r24
 5c6:	fc 01       	movw	r30, r24
 5c8:	67 2f       	mov	r22, r23
 5ca:	71 91       	ld	r23, Z+
 5cc:	77 23       	and	r23, r23
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <strrev+0x4>
 5d0:	32 97       	sbiw	r30, 0x02	; 2
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <strrev+0x18>
 5d4:	7c 91       	ld	r23, X
 5d6:	6d 93       	st	X+, r22
 5d8:	70 83       	st	Z, r23
 5da:	62 91       	ld	r22, -Z
 5dc:	ae 17       	cp	r26, r30
 5de:	bf 07       	cpc	r27, r31
 5e0:	c8 f3       	brcs	.-14     	; 0x5d4 <strrev+0x10>
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
